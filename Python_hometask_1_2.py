'''
№1

Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные для вычислений.
Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.

Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'),
то программа должна сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя.


Ограничения:

Постарайтесь решить задачи без использования массивов. Им будет посвящён следующий урок.

'''

import operator

list_operators = {
    "-": operator.sub,
    "*": operator.mul,
    "/": operator.truediv}

def calculator (a, b, z):
    a =  int(input("Введите первое число: "))
    b =  int(input("Введите второе число: "))

    if b == 0:
        print ("Ошибка ввода, нельзя делить на 0 ")
        b =  int(input("Введите второе число: "))

    z = input("Введите знак умножения *, деления / или вычитания :")

    while z !='0' and z not in list_operators :
        print ("Ошибка ввода")
        z = input("Введите знак умножения *, деления / или вычитания :")

    if z == '0': # Пишем базовый случай рекурсии
        print ('Конец игры')
    else: # Рекурсивное условие
        print (list_operators[z](a,b))
        return (str(calculator (a, b, z)))
print (calculator (a, b, z))

'''
2

Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

'''

a =  input("Введите число: ")
chet = []
nechet = []
for i in a:
    if int(i)%2 ==0:
        chet.append(i)
    else:
        nechet.append(i)
print (*chet)
print (*nechet)

'''
3

Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
Например, если введено число 3486, то надо вывести число 6843.

'''
n=int(input("Введите число: "))
rev_n =0
while(n>0): # циклим пока n не будет равен 0
    dig=n%10 # делим на 10 и получаем остаток после запятой
    rev_n=rev_n*10+dig # складываем его в rev
    n=n//10 # сокращаем n на десяток
print("Обратное число:",rev_n)

'''
4
Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.
'''

n=int(input("Введите количество элементов: "))
num = [1, (-0.5), 0.25, (-0.125)]
sum_l = []
for i in num[:n]:
    sum_l.append(i)
print (sum(sum_l))
